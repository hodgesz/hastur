#!/usr/bin/env ruby

require "hastur"
require "chronic"
require "trollop"

opts = Trollop::options do
  banner <<EOS
hastur is a command-line program to send Hastur metrics.

Usage:
  hastur [options] <type> [<name> [<value>]]

Examples:
  hastur counter things.to.do 4 --labels app=MyApp type=todo
  hastur heartbeat slow.cron.job
  hastur mark script.ran.after.failed.job --labels env=development activity=debugging
  hastur gauge old.gauge 37.1 --time "3 months ago Saturday at 5pm"

Options:
EOS
  opt :time,     "Timestamp to send",       :type => String
  opt :labels,   "Labels to send",          :type => :strings,           :multi => true
  opt :print,    "Print the call args",     :type => :boolean,           :default => false
end

Trollop::die "you must give a type!" if ARGV.empty?
Type = ARGV.shift.downcase

# Args:
#   - mark: name, value, timestamp, labels
#   - counter: name, increment, timestamp, labels
#   - gauge: name, value, timestamp, labels
#   - event: name, subject, body, attn, timestamp, labels
#   - heartbeat: name, value, timeout, timestamp, labels

TYPES = {
  "mark" => {
    :name => true,
    :value => :maybe,
  },
  "gauge" => {
    :name => true,
    :value => true,
  },
  "counter" => {
    :name => true,
    :value => :maybe,
  },
  "heartbeat" => {
    :name => :maybe,
    :value => :maybe,
    :timeout => :maybe,
  }
}

Trollop::die "Type must be one of: #{TYPES.keys.join(', ')}" unless TYPES[Type]

#
# This method tries to evaluate a string as Ruby and, if it can't,
# dies saying so.
#
# @param [String] value_string The code to evaluate
# @param [String] description What the value will be used as
# @return The result of the eval
# @raise TrollopException Your string didn't parse or raised an exception
#
def try_eval(value_string, description)
  begin
    value = eval(value_string)
  rescue Exception
    Trollop::die "Your #{description} (#{value_string}) didn't run as Ruby: #{$!.message}"
  end
  value
end

#
# Try to get an argument by name if this message type supports it.
#
def try_get_arg(args, arg_name, message_type)
  # Doesn't allow this arg type?  Return quietly.
  return unless TYPES[Type][arg_name]

  if ARGV.size > 0
    # If the arg is here and TYPES[Type][arg_name] is true or maybe, use it.
    if block_given?
      args << yield(ARGV.shift, arg_name, message_type)
    else
      args << try_eval(ARGV.shift, arg_name)
    end
  elsif TYPES[Type][arg_name] == :maybe
    args << nil
  else
    Trollop::die "You must give a #{arg_name} for a metric of type #{Type}"
  end
end

##############################
# Build the argument list
##############################
args = [ Type ]

try_get_arg(args, :name, Type) { |arg, _, _| arg.to_s }
try_get_arg(args, :value, Type)
# TODO(noah): add timeout for heartbeat

# Time is next to last
time = Time.now
if opts[:time]
  time = Chronic.parse opts[:time]
end
args << time

# Labels is last
labels = {}
if opts[:labels]
  opts[:labels].flatten.each do |item|
    name, value = item.split("=")
    labels[name] = try_eval(value, "label value")
  end
end

args << labels

puts "Hastur.send *#{args.inspect}" if opts[:print]

Hastur.send(*args)
